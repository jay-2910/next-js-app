generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model activations {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id      Int       @db.UnsignedInt
  code         String
  completed    Boolean   @default(false)
  completed_at DateTime? @db.DateTime(0)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  users        users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "activations_user_id_foreign")

  @@index([user_id], map: "activations_user_id_index")
}

model addresses {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  customer_id       Int                 @db.UnsignedInt
  first_name        String
  last_name         String
  address_1         String
  address_2         String?
  city              String
  state             String
  zip               String
  country           String
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  users             users               @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "addresses_customer_id_foreign")
  default_addresses default_addresses[]

  @@index([customer_id], map: "addresses_customer_id_foreign")
}

model attribute_categories {
  attribute_id Int        @db.UnsignedInt
  category_id  Int        @db.UnsignedInt
  attributes   attributes @relation(fields: [attribute_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "attribute_categories_attribute_id_foreign")
  categories   categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "attribute_categories_category_id_foreign")

  @@id([attribute_id, category_id])
  @@index([category_id], map: "attribute_categories_category_id_foreign")
}

model attribute_set_translations {
  id               Int            @id @default(autoincrement()) @db.UnsignedInt
  attribute_set_id Int            @db.UnsignedInt
  locale           String
  name             String
  attribute_sets   attribute_sets @relation(fields: [attribute_set_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "attribute_set_translations_attribute_set_id_foreign")

  @@unique([attribute_set_id, locale], map: "attribute_set_translations_attribute_set_id_locale_unique")
}

model attribute_sets {
  id                         Int                          @id @default(autoincrement()) @db.UnsignedInt
  created_at                 DateTime?                    @db.Timestamp(0)
  updated_at                 DateTime?                    @db.Timestamp(0)
  attribute_set_translations attribute_set_translations[]
  attributes                 attributes[]
}

model attribute_translations {
  id           Int        @id @default(autoincrement()) @db.UnsignedInt
  attribute_id Int        @db.UnsignedInt
  locale       String
  name         String
  attributes   attributes @relation(fields: [attribute_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "attribute_translations_attribute_id_foreign")

  @@unique([attribute_id, locale], map: "attribute_translations_attribute_id_locale_unique")
}

model attribute_value_translations {
  id                 Int              @id @default(autoincrement()) @db.UnsignedInt
  attribute_value_id Int              @db.UnsignedInt
  locale             String
  value              String
  attribute_values   attribute_values @relation(fields: [attribute_value_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "attribute_value_translations_attribute_value_id_foreign")

  @@unique([attribute_value_id, locale], map: "attribute_value_translations_attribute_value_id_locale_unique")
}

model attribute_values {
  id                           Int                            @id @default(autoincrement()) @db.UnsignedInt
  attribute_id                 Int                            @db.UnsignedInt
  position                     Int                            @db.UnsignedInt
  created_at                   DateTime?                      @db.Timestamp(0)
  updated_at                   DateTime?                      @db.Timestamp(0)
  attribute_value_translations attribute_value_translations[]
  attributes                   attributes                     @relation(fields: [attribute_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "attribute_values_attribute_id_foreign")
  product_attribute_values     product_attribute_values[]

  @@index([attribute_id], map: "attribute_values_attribute_id_index")
}

model attributes {
  id                     Int                      @id @default(autoincrement()) @db.UnsignedInt
  attribute_set_id       Int                      @db.UnsignedInt
  is_filterable          Boolean
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  slug                   String?                  @unique(map: "attributes_slug_unique")
  attribute_categories   attribute_categories[]
  attribute_translations attribute_translations[]
  attribute_values       attribute_values[]
  attribute_sets         attribute_sets           @relation(fields: [attribute_set_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "attributes_attribute_set_id_foreign")
  product_attributes     product_attributes[]

  @@index([attribute_set_id], map: "attributes_attribute_set_id_index")
}

model block_translations {
  id       BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  block_id BigInt? @db.UnsignedBigInt
  locale   String
  name     String
  content  String  @db.Text
  blocks   blocks? @relation(fields: [block_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "block_translations_block_id_foreign")

  @@index([block_id], map: "block_translations_block_id_foreign")
}

model blocks {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  identifier         String
  is_active          Int
  created_at         DateTime?            @db.Timestamp(0)
  updated_at         DateTime?            @db.Timestamp(0)
  block_translations block_translations[]
}

model blog_categories {
  id                         BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  slug                       String                       @unique(map: "blog_categories_slug_unique")
  created_at                 DateTime?                    @db.Timestamp(0)
  updated_at                 DateTime?                    @db.Timestamp(0)
  blog_category_translations blog_category_translations[]
  blog_posts                 blog_posts[]
}

model blog_category_translations {
  id               Int             @id @default(autoincrement()) @db.UnsignedInt
  blog_category_id BigInt          @db.UnsignedBigInt
  locale           String
  name             String
  blog_categories  blog_categories @relation(fields: [blog_category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "blog_category_translations_blog_category_id_foreign")

  @@unique([blog_category_id, locale], map: "blog_category_translations_blog_category_id_locale_unique")
}

model blog_post_blog_tag {
  blog_post_id BigInt     @db.UnsignedBigInt
  blog_tag_id  BigInt     @db.UnsignedBigInt
  blog_posts   blog_posts @relation(fields: [blog_post_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "blog_post_blog_tag_blog_post_id_foreign")
  blog_tags    blog_tags  @relation(fields: [blog_tag_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "blog_post_blog_tag_blog_tag_id_foreign")

  @@id([blog_post_id, blog_tag_id])
  @@index([blog_tag_id], map: "blog_post_blog_tag_blog_tag_id_foreign")
}

model blog_post_translations {
  id           Int        @id @default(autoincrement()) @db.UnsignedInt
  blog_post_id BigInt     @db.UnsignedBigInt
  locale       String
  title        String
  description  String     @db.LongText
  blog_posts   blog_posts @relation(fields: [blog_post_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "blog_post_translations_blog_post_id_foreign")

  @@unique([blog_post_id, locale], map: "blog_post_translations_blog_post_id_locale_unique")
  @@index([title], map: "title")
}

model blog_posts {
  id                     BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                Int                      @db.UnsignedInt
  blog_category_id       BigInt?                  @db.UnsignedBigInt
  slug                   String                   @unique(map: "blog_posts_slug_unique")
  publish_status         String
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  blog_post_blog_tag     blog_post_blog_tag[]
  blog_post_translations blog_post_translations[]
  blog_categories        blog_categories?         @relation(fields: [blog_category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "blog_posts_blog_category_id_foreign")
  users                  users                    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "blog_posts_user_id_foreign")

  @@index([blog_category_id], map: "blog_posts_blog_category_id_foreign")
  @@index([user_id], map: "blog_posts_user_id_foreign")
}

model blog_tag_translations {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  blog_tag_id BigInt    @db.UnsignedBigInt
  locale      String
  name        String
  blog_tags   blog_tags @relation(fields: [blog_tag_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "blog_tag_translations_blog_tag_id_foreign")

  @@unique([blog_tag_id, locale], map: "blog_tag_translations_blog_tag_id_locale_unique")
}

model blog_tags {
  id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  slug                  String                  @unique(map: "blog_tags_slug_unique")
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  blog_post_blog_tag    blog_post_blog_tag[]
  blog_tag_translations blog_tag_translations[]
}

model brand_translations {
  id       Int    @id @default(autoincrement()) @db.UnsignedInt
  brand_id Int
  locale   String
  name     String

  @@unique([brand_id, locale], map: "brand_translations_brand_id_locale_unique")
}

model brands {
  id         Int        @id @default(autoincrement()) @db.UnsignedInt
  slug       String     @unique(map: "brands_slug_unique")
  is_active  Boolean
  created_at DateTime?  @db.Timestamp(0)
  updated_at DateTime?  @db.Timestamp(0)
  products   products[]
}

model carts {
  id         String    @id
  data       String    @db.LongText
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([id], map: "carts_id_index")
}

model categories {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  parent_id             Int?                    @db.UnsignedInt
  slug                  String                  @unique(map: "categories_slug_unique")
  position              Int?                    @db.UnsignedInt
  is_searchable         Boolean
  is_active             Boolean
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  attribute_categories  attribute_categories[]
  categories            categories?             @relation("categoriesTocategories", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "categories_parent_id_foreign")
  other_categories      categories[]            @relation("categoriesTocategories")
  category_translations category_translations[]
  coupon_categories     coupon_categories[]
  menu_items            menu_items[]
  product_categories    product_categories[]

  @@index([parent_id], map: "categories_parent_id_foreign")
}

model category_translations {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  category_id Int        @db.UnsignedInt
  locale      String
  name        String
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "category_translations_category_id_foreign")

  @@unique([category_id, locale], map: "category_translations_category_id_locale_unique")
}

model committee_translations {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  committee_id BigInt?     @db.UnsignedBigInt
  locale       String
  name         String
  committees   committees? @relation(fields: [committee_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "committee_translations_committee_id_foreign")

  @@index([committee_id], map: "committee_translations_committee_id_foreign")
}

model committees {
  id                     BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  committee_translations committee_translations[]
  user_positions         user_positions[]
}

model countries {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  sort_order           Int
  is_active            Int
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  code                 String
  country_translations country_translations[]
}

model country_translations {
  id         BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  country_id BigInt?    @db.UnsignedBigInt
  locale     String
  name       String
  countries  countries? @relation(fields: [country_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "country_translations_country_id_foreign")

  @@index([country_id], map: "country_translations_country_id_foreign")
}

model coupon_categories {
  coupon_id   Int        @db.UnsignedInt
  category_id Int        @db.UnsignedInt
  exclude     Boolean    @default(false)
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "coupon_categories_category_id_foreign")
  coupons     coupons    @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "coupon_categories_coupon_id_foreign")

  @@id([coupon_id, category_id, exclude])
  @@index([category_id], map: "coupon_categories_category_id_foreign")
}

model coupon_products {
  coupon_id  Int      @db.UnsignedInt
  product_id Int      @db.UnsignedInt
  exclude    Boolean  @default(false)
  coupons    coupons  @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "coupon_products_coupon_id_foreign")
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "coupon_products_product_id_foreign")

  @@id([coupon_id, product_id])
  @@index([product_id], map: "coupon_products_product_id_foreign")
}

model coupon_translations {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  coupon_id Int     @db.UnsignedInt
  locale    String
  name      String
  coupons   coupons @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "coupon_translations_coupon_id_foreign")

  @@unique([coupon_id, locale], map: "coupon_translations_coupon_id_locale_unique")
}

model coupons {
  id                       Int                   @id @default(autoincrement()) @db.UnsignedInt
  code                     String
  value                    Decimal?              @db.Decimal(18, 4)
  is_percent               Boolean
  free_shipping            Boolean
  minimum_spend            Decimal?              @db.Decimal(18, 4)
  maximum_spend            Decimal?              @db.Decimal(18, 4)
  usage_limit_per_coupon   Int?                  @db.UnsignedInt
  usage_limit_per_customer Int?                  @db.UnsignedInt
  used                     Int                   @default(0)
  is_active                Boolean
  start_date               DateTime?             @db.Date
  end_date                 DateTime?             @db.Date
  deleted_at               DateTime?             @db.Timestamp(0)
  created_at               DateTime?             @db.Timestamp(0)
  updated_at               DateTime?             @db.Timestamp(0)
  coupon_categories        coupon_categories[]
  coupon_products          coupon_products[]
  coupon_translations      coupon_translations[]

  @@index([code], map: "coupons_code_index")
}

model cross_sell_products {
  product_id                                                   Int       @db.UnsignedInt
  cross_sell_product_id                                        Int       @db.UnsignedInt
  created_at                                                   DateTime? @db.Timestamp(0)
  updated_at                                                   DateTime? @db.Timestamp(0)
  products_cross_sell_products_cross_sell_product_idToproducts products  @relation("cross_sell_products_cross_sell_product_idToproducts", fields: [cross_sell_product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cross_sell_products_cross_sell_product_id_foreign")
  products_cross_sell_products_product_idToproducts            products  @relation("cross_sell_products_product_idToproducts", fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cross_sell_products_product_id_foreign")

  @@id([product_id, cross_sell_product_id])
  @@index([cross_sell_product_id], map: "cross_sell_products_cross_sell_product_id_foreign")
}

model currency_rates {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  currency   String    @unique(map: "currency_rates_currency_unique")
  rate       Decimal?  @db.Decimal(12, 4)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model default_addresses {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  customer_id Int       @db.UnsignedInt
  address_id  Int       @db.UnsignedInt
  addresses   addresses @relation(fields: [address_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "default_addresses_address_id_foreign")
  users       users     @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "default_addresses_customer_id_foreign")

  @@index([address_id], map: "default_addresses_address_id_foreign")
  @@index([customer_id], map: "default_addresses_customer_id_foreign")
}

model education_translations {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  education_id BigInt?     @db.UnsignedBigInt
  locale       String
  name         String
  educations   educations? @relation(fields: [education_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "education_translations_education_id_foreign")

  @@index([education_id], map: "education_translations_education_id_foreign")
}

model educations {
  id                     BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  sort_order             Int
  is_active              Int
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  education_translations education_translations[]
}

model entity_files {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  file_id     Int       @db.UnsignedInt
  entity_type String
  entity_id   BigInt    @db.UnsignedBigInt
  zone        String
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  files       files     @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "entity_files_file_id_foreign")

  @@index([entity_type, entity_id], map: "entity_files_entity_type_entity_id_index")
  @@index([file_id], map: "entity_files_file_id_index")
  @@index([zone], map: "entity_files_zone_index")
}

model event_translations {
  id          BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  event_id    BigInt? @db.UnsignedBigInt
  locale      String
  name        String
  address     String
  description String  @db.LongText
  events      events? @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "event_translations_event_id_foreign")

  @@index([event_id], map: "event_translations_event_id_foreign")
}

model events {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  video_link         String?
  slug               String               @unique(map: "events_slug_unique")
  event_date         DateTime             @db.Date
  start_time         DateTime             @db.Time(0)
  end_time           DateTime             @db.Time(0)
  is_active          Boolean
  created_at         DateTime?            @db.Timestamp(0)
  updated_at         DateTime?            @db.Timestamp(0)
  event_translations event_translations[]
}

model files {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  user_id         Int               @db.UnsignedInt
  filename        String
  disk            String
  path            String
  extension       String
  mime            String
  size            String
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  entity_files    entity_files[]
  order_downloads order_downloads[]

  @@index([filename], map: "files_filename_index")
  @@index([user_id], map: "files_user_id_index")
}

model flash_sale_product_orders {
  flash_sale_product_id Int                 @db.UnsignedInt
  order_id              Int                 @db.UnsignedInt
  qty                   Int
  flash_sale_products   flash_sale_products @relation(fields: [flash_sale_product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "flash_sale_product_orders_flash_sale_product_id_foreign")
  orders                orders              @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "flash_sale_product_orders_order_id_foreign")

  @@id([flash_sale_product_id, order_id])
  @@index([order_id], map: "flash_sale_product_orders_order_id_foreign")
}

model flash_sale_products {
  id                        Int                         @id @default(autoincrement()) @db.UnsignedInt
  flash_sale_id             Int                         @db.UnsignedInt
  product_id                Int                         @db.UnsignedInt
  end_date                  DateTime                    @db.Date
  price                     Decimal                     @db.Decimal(18, 4)
  qty                       Int
  position                  Int
  flash_sale_product_orders flash_sale_product_orders[]
  flash_sales               flash_sales                 @relation(fields: [flash_sale_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "flash_sale_products_flash_sale_id_foreign")
  products                  products                    @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "flash_sale_products_product_id_foreign")

  @@index([flash_sale_id], map: "flash_sale_products_flash_sale_id_foreign")
  @@index([product_id], map: "flash_sale_products_product_id_foreign")
}

model flash_sale_translations {
  id            Int         @id @default(autoincrement()) @db.UnsignedInt
  flash_sale_id Int         @db.UnsignedInt
  locale        String
  campaign_name String
  flash_sales   flash_sales @relation(fields: [flash_sale_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "flash_sale_translations_flash_sale_id_foreign")

  @@unique([flash_sale_id, locale], map: "flash_sale_translations_flash_sale_id_locale_unique")
}

model flash_sales {
  id                      Int                       @id @default(autoincrement()) @db.UnsignedInt
  created_at              DateTime?                 @db.Timestamp(0)
  updated_at              DateTime?                 @db.Timestamp(0)
  flash_sale_products     flash_sale_products[]
  flash_sale_translations flash_sale_translations[]
}

model menu_item_translations {
  id           Int        @id @default(autoincrement()) @db.UnsignedInt
  menu_item_id Int        @db.UnsignedInt
  locale       String
  name         String
  menu_items   menu_items @relation(fields: [menu_item_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "menu_item_translations_menu_item_id_foreign")

  @@unique([menu_item_id, locale], map: "menu_item_translations_menu_item_id_locale_unique")
}

model menu_items {
  id                     Int                      @id @default(autoincrement()) @db.UnsignedInt
  menu_id                Int                      @db.UnsignedInt
  parent_id              Int?                     @db.UnsignedInt
  category_id            Int?                     @db.UnsignedInt
  page_id                Int?                     @db.UnsignedInt
  type                   String
  url                    String?
  icon                   String?
  target                 String
  position               Int?                     @db.UnsignedInt
  is_root                Boolean                  @default(false)
  is_fluid               Boolean
  is_active              Boolean
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  menu_item_translations menu_item_translations[]
  categories             categories?              @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "menu_items_category_id_foreign")
  menus                  menus                    @relation(fields: [menu_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "menu_items_menu_id_foreign")
  pages                  pages?                   @relation(fields: [page_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "menu_items_page_id_foreign")
  menu_items             menu_items?              @relation("menu_itemsTomenu_items", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "menu_items_parent_id_foreign")
  other_menu_items       menu_items[]             @relation("menu_itemsTomenu_items")

  @@index([category_id], map: "menu_items_category_id_foreign")
  @@index([menu_id], map: "menu_items_menu_id_index")
  @@index([page_id], map: "menu_items_page_id_foreign")
  @@index([parent_id], map: "menu_items_parent_id_foreign")
}

model menu_translations {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  menu_id Int    @db.UnsignedInt
  locale  String
  name    String
  menus   menus  @relation(fields: [menu_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "menu_translations_menu_id_foreign")

  @@unique([menu_id, locale], map: "menu_translations_menu_id_locale_unique")
}

model menus {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  is_active         Boolean
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  menu_items        menu_items[]
  menu_translations menu_translations[]
}

model meta_data {
  id                     Int                      @id @default(autoincrement()) @db.UnsignedInt
  entity_type            String
  entity_id              BigInt                   @db.UnsignedBigInt
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  meta_data_translations meta_data_translations[]

  @@index([entity_type, entity_id], map: "meta_data_entity_type_entity_id_index")
}

model meta_data_translations {
  id               Int       @id @default(autoincrement()) @db.UnsignedInt
  meta_data_id     Int       @db.UnsignedInt
  locale           String
  meta_title       String?
  meta_description String?   @db.Text
  meta_data        meta_data @relation(fields: [meta_data_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "meta_data_translations_meta_data_id_foreign")

  @@unique([meta_data_id, locale], map: "meta_data_translations_meta_data_id_locale_unique")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String
  batch     Int
}

model news {
  id                BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  newscategory_id   BigInt?             @db.UnsignedBigInt
  video_link        String?
  slug              String              @unique(map: "news_slug_unique")
  release_date      DateTime?           @db.Date
  is_active         Boolean
  sort_order        Int
  display_on_home   Int
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  newscategories    newscategories?     @relation(fields: [newscategory_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "news_newscategory_id_foreign")
  news_translations news_translations[]

  @@index([newscategory_id], map: "news_newscategory_id_foreign")
}

model news_translations {
  id          BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  news_id     BigInt? @db.UnsignedBigInt
  locale      String
  name        String
  description String  @db.LongText
  news        news?   @relation(fields: [news_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "news_translations_news_id_foreign")

  @@index([news_id], map: "news_translations_news_id_foreign")
}

model newscategories {
  id                        BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  is_active                 Int
  created_at                DateTime?                   @db.Timestamp(0)
  updated_at                DateTime?                   @db.Timestamp(0)
  news                      news[]
  newscategory_translations newscategory_translations[]
}

model newscategory_translations {
  id              BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  newscategory_id BigInt?         @db.UnsignedBigInt
  locale          String
  name            String
  newscategories  newscategories? @relation(fields: [newscategory_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "newscategory_translations_newscategory_id_foreign")

  @@index([newscategory_id], map: "newscategory_translations_newscategory_id_foreign")
}

model option_translations {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  option_id Int     @db.UnsignedInt
  locale    String
  name      String
  options   options @relation(fields: [option_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "option_translations_option_id_foreign")

  @@unique([option_id, locale], map: "option_translations_option_id_locale_unique")
}

model option_value_translations {
  id              Int           @id @default(autoincrement()) @db.UnsignedInt
  option_value_id Int           @db.UnsignedInt
  locale          String
  label           String
  option_values   option_values @relation(fields: [option_value_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "option_value_translations_option_value_id_foreign")

  @@unique([option_value_id, locale], map: "option_value_translations_option_value_id_locale_unique")
}

model option_values {
  id                          Int                           @id @default(autoincrement()) @db.UnsignedInt
  option_id                   Int                           @db.UnsignedInt
  price                       Decimal?                      @db.Decimal(18, 4)
  price_type                  String                        @db.VarChar(10)
  position                    Int                           @db.UnsignedInt
  created_at                  DateTime?                     @db.Timestamp(0)
  updated_at                  DateTime?                     @db.Timestamp(0)
  option_value_translations   option_value_translations[]
  options                     options                       @relation(fields: [option_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "option_values_option_id_foreign")
  order_product_option_values order_product_option_values[]

  @@index([option_id], map: "option_values_option_id_index")
}

model options {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  type                  String
  is_required           Boolean
  is_global             Boolean                 @default(true)
  position              Int?                    @db.UnsignedInt
  deleted_at            DateTime?               @db.Timestamp(0)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  option_translations   option_translations[]
  option_values         option_values[]
  order_product_options order_product_options[]
  product_options       product_options[]
}

model order_downloads {
  id       Int    @id @default(autoincrement()) @db.UnsignedInt
  order_id Int    @db.UnsignedInt
  file_id  Int    @db.UnsignedInt
  files    files  @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_downloads_file_id_foreign")
  orders   orders @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_downloads_order_id_foreign")

  @@index([file_id], map: "order_downloads_file_id_foreign")
  @@index([order_id], map: "order_downloads_order_id_foreign")
}

model order_product_option_values {
  order_product_option_id Int                   @db.UnsignedInt
  option_value_id         Int                   @db.UnsignedInt
  price                   Decimal?              @db.Decimal(18, 4)
  option_values           option_values         @relation(fields: [option_value_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_product_option_values_option_value_id_foreign")
  order_product_options   order_product_options @relation(fields: [order_product_option_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_product_option_values_order_product_option_id_foreign")

  @@id([order_product_option_id, option_value_id])
  @@index([option_value_id], map: "order_product_option_values_option_value_id_foreign")
}

model order_product_options {
  id                          Int                           @id @default(autoincrement()) @db.UnsignedInt
  order_product_id            Int                           @db.UnsignedInt
  option_id                   Int                           @db.UnsignedInt
  value                       String?                       @db.Text
  order_product_option_values order_product_option_values[]
  options                     options                       @relation(fields: [option_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_product_options_option_id_foreign")
  order_products              order_products                @relation(fields: [order_product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_product_options_order_product_id_foreign")

  @@unique([order_product_id, option_id], map: "order_product_options_order_product_id_option_id_unique")
  @@index([option_id], map: "order_product_options_option_id_foreign")
}

model order_product_variation_values {
  order_product_variation_id Int                      @db.UnsignedInt
  variation_value_id         Int                      @db.UnsignedInt
  order_product_variations   order_product_variations @relation(fields: [order_product_variation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_product_variation_values_order_product_variation_id")
  variation_values           variation_values         @relation(fields: [variation_value_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_product_variation_values_variation_value_id_foreign")

  @@id([order_product_variation_id, variation_value_id])
  @@index([variation_value_id], map: "order_product_variation_values_variation_value_id_foreign")
}

model order_product_variations {
  id                             Int                              @id @default(autoincrement()) @db.UnsignedInt
  order_product_id               Int                              @db.UnsignedInt
  variation_id                   Int                              @db.UnsignedInt
  type                           String
  value                          String
  order_product_variation_values order_product_variation_values[]
  order_products                 order_products                   @relation(fields: [order_product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_product_variations_order_product_id_foreign")
  variations                     variations                       @relation(fields: [variation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_product_variations_variation_id_foreign")

  @@unique([order_product_id, variation_id], map: "order_product_variations_order_product_id_variation_id_unique")
  @@index([variation_id], map: "order_product_variations_variation_id_foreign")
}

model order_products {
  id                       Int                        @id @default(autoincrement()) @db.UnsignedInt
  order_id                 Int                        @db.UnsignedInt
  product_id               Int                        @db.UnsignedInt
  product_variant_id       BigInt?                    @db.UnsignedBigInt
  unit_price               Decimal                    @db.Decimal(18, 4)
  qty                      Int
  line_total               Decimal                    @db.Decimal(18, 4)
  order_product_options    order_product_options[]
  order_product_variations order_product_variations[]
  orders                   orders                     @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_products_order_id_foreign")
  products                 products                   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_products_product_id_foreign")

  @@index([order_id], map: "order_products_order_id_foreign")
  @@index([product_id], map: "order_products_product_id_foreign")
}

model order_taxes {
  order_id    Int       @db.UnsignedInt
  tax_rate_id Int       @db.UnsignedInt
  amount      Decimal   @db.Decimal(15, 4)
  orders      orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_taxes_order_id_foreign")
  tax_rates   tax_rates @relation(fields: [tax_rate_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_taxes_tax_rate_id_foreign")

  @@id([order_id, tax_rate_id])
  @@index([tax_rate_id], map: "order_taxes_tax_rate_id_foreign")
}

model orders {
  id                        Int                         @id @default(autoincrement()) @db.UnsignedInt
  customer_id               Int?
  customer_email            String
  customer_phone            String?
  customer_first_name       String
  customer_last_name        String
  billing_first_name        String
  billing_last_name         String
  billing_address_1         String
  billing_address_2         String?
  billing_city              String
  billing_state             String
  billing_zip               String
  billing_country           String
  shipping_first_name       String
  shipping_last_name        String
  shipping_address_1        String
  shipping_address_2        String?
  shipping_city             String
  shipping_state            String
  shipping_zip              String
  shipping_country          String
  sub_total                 Decimal                     @db.Decimal(18, 4)
  shipping_method           String?
  shipping_cost             Decimal                     @db.Decimal(18, 4)
  coupon_id                 Int?
  discount                  Decimal                     @db.Decimal(18, 4)
  total                     Decimal                     @db.Decimal(18, 4)
  payment_method            String
  currency                  String
  currency_rate             Decimal                     @db.Decimal(18, 4)
  locale                    String
  status                    String
  note                      String?                     @db.Text
  deleted_at                DateTime?                   @db.Timestamp(0)
  created_at                DateTime?                   @db.Timestamp(0)
  updated_at                DateTime?                   @db.Timestamp(0)
  flash_sale_product_orders flash_sale_product_orders[]
  order_downloads           order_downloads[]
  order_products            order_products[]
  order_taxes               order_taxes[]
  transactions              transactions?

  @@index([coupon_id], map: "orders_coupon_id_index")
  @@index([customer_id], map: "orders_customer_id_index")
}

model page_translations {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  page_id Int    @db.UnsignedInt
  locale  String
  name    String
  body    String @db.LongText
  pages   pages  @relation(fields: [page_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "page_translations_page_id_foreign")

  @@unique([page_id, locale], map: "page_translations_page_id_locale_unique")
}

model pages {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  slug              String              @unique(map: "pages_slug_unique")
  is_active         Boolean
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  menu_items        menu_items[]
  page_translations page_translations[]
}

model persistences {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int       @db.UnsignedInt
  code       String    @unique(map: "persistences_code_unique")
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "persistences_user_id_foreign")

  @@index([user_id], map: "persistences_user_id_foreign")
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model position_translations {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  position_id BigInt?    @db.UnsignedBigInt
  locale      String
  name        String
  positions   positions? @relation(fields: [position_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "position_translations_position_id_foreign")

  @@index([position_id], map: "position_translations_position_id_foreign")
}

model positions {
  id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  no_of_position        Int
  order                 Int
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  position_translations position_translations[]
  user_positions        user_positions[]
}

model product_attribute_values {
  product_attribute_id Int                @db.UnsignedInt
  attribute_value_id   Int                @db.UnsignedInt
  attribute_values     attribute_values   @relation(fields: [attribute_value_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_attribute_values_attribute_value_id_foreign")
  product_attributes   product_attributes @relation(fields: [product_attribute_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_attribute_values_product_attribute_id_foreign")

  @@id([product_attribute_id, attribute_value_id])
  @@index([attribute_value_id], map: "product_attribute_values_attribute_value_id_foreign")
}

model product_attributes {
  id                       Int                        @id @default(autoincrement()) @db.UnsignedInt
  product_id               Int                        @db.UnsignedInt
  attribute_id             Int                        @db.UnsignedInt
  product_attribute_values product_attribute_values[]
  attributes               attributes                 @relation(fields: [attribute_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_attributes_attribute_id_foreign")
  products                 products                   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_attributes_product_id_foreign")

  @@index([attribute_id], map: "product_attributes_attribute_id_index")
  @@index([product_id], map: "product_attributes_product_id_index")
}

model product_categories {
  product_id  Int        @db.UnsignedInt
  category_id Int        @db.UnsignedInt
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_categories_category_id_foreign")
  products    products   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_categories_product_id_foreign")

  @@id([product_id, category_id])
  @@index([category_id], map: "product_categories_category_id_foreign")
}

model product_options {
  product_id Int      @db.UnsignedInt
  option_id  Int      @db.UnsignedInt
  options    options  @relation(fields: [option_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_options_option_id_foreign")
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_options_product_id_foreign")

  @@id([product_id, option_id])
  @@index([option_id], map: "product_options_option_id_foreign")
}

model product_tags {
  product_id Int      @db.UnsignedInt
  tag_id     Int      @db.UnsignedInt
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_tags_product_id_foreign")
  tags       tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_tags_tag_id_foreign")

  @@id([product_id, tag_id])
  @@index([tag_id], map: "product_tags_tag_id_foreign")
}

model product_translations {
  id                Int      @id @default(autoincrement()) @db.UnsignedInt
  product_id        Int      @db.UnsignedInt
  locale            String
  name              String
  description       String   @db.LongText
  short_description String?  @db.Text
  products          products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_translations_product_id_foreign")

  @@unique([product_id, locale], map: "product_translations_product_id_locale_unique")
  @@index([name], map: "name")
}

model product_variants {
  id                  Int       @id @default(autoincrement()) @db.UnsignedInt
  uid                 String
  uids                String    @db.Text
  product_id          Int       @db.UnsignedInt
  name                String
  price               Decimal?  @db.Decimal(18, 4)
  special_price       Decimal?  @db.Decimal(18, 4)
  special_price_type  String?
  special_price_start DateTime? @db.Date
  special_price_end   DateTime? @db.Date
  selling_price       Decimal?  @db.Decimal(18, 4)
  sku                 String?
  manage_stock        Boolean?
  qty                 Int?
  in_stock            Boolean?
  is_default          Boolean?
  is_active           Boolean?
  position            Int?      @db.UnsignedInt
  deleted_at          DateTime? @db.Timestamp(0)
  created_at          DateTime? @db.Timestamp(0)
  updated_at          DateTime? @db.Timestamp(0)
  products            products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_variants_product_id_foreign")

  @@index([product_id], map: "product_variants_product_id_foreign")
}

model product_variations {
  product_id   Int        @db.UnsignedInt
  variation_id Int        @db.UnsignedInt
  products     products   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_variations_product_id_foreign")
  variations   variations @relation(fields: [variation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_variations_variation_id_foreign")

  @@id([product_id, variation_id])
  @@index([variation_id], map: "product_variations_variation_id_foreign")
}

model products {
  id                                                                      Int                    @id @default(autoincrement()) @db.UnsignedInt
  brand_id                                                                Int?                   @db.UnsignedInt
  tax_class_id                                                            Int?                   @db.UnsignedInt
  slug                                                                    String                 @unique(map: "products_slug_unique")
  price                                                                   Decimal?               @db.Decimal(18, 4)
  special_price                                                           Decimal?               @db.Decimal(18, 4)
  special_price_type                                                      String?
  special_price_start                                                     DateTime?              @db.Date
  special_price_end                                                       DateTime?              @db.Date
  selling_price                                                           Decimal?               @db.Decimal(18, 4)
  sku                                                                     String?
  manage_stock                                                            Boolean                @default(false)
  qty                                                                     Int?
  in_stock                                                                Boolean                @default(true)
  viewed                                                                  Int                    @default(0) @db.UnsignedInt
  is_active                                                               Boolean
  new_from                                                                DateTime?              @db.DateTime(0)
  new_to                                                                  DateTime?              @db.DateTime(0)
  deleted_at                                                              DateTime?              @db.Timestamp(0)
  created_at                                                              DateTime?              @db.Timestamp(0)
  updated_at                                                              DateTime?              @db.Timestamp(0)
  is_virtual                                                              Boolean                @default(false)
  coupon_products                                                         coupon_products[]
  cross_sell_products_cross_sell_products_cross_sell_product_idToproducts cross_sell_products[]  @relation("cross_sell_products_cross_sell_product_idToproducts")
  cross_sell_products_cross_sell_products_product_idToproducts            cross_sell_products[]  @relation("cross_sell_products_product_idToproducts")
  flash_sale_products                                                     flash_sale_products[]
  order_products                                                          order_products[]
  product_attributes                                                      product_attributes[]
  product_categories                                                      product_categories[]
  product_options                                                         product_options[]
  product_tags                                                            product_tags[]
  product_translations                                                    product_translations[]
  product_variants                                                        product_variants[]
  product_variations                                                      product_variations[]
  brands                                                                  brands?                @relation(fields: [brand_id], references: [id], onUpdate: Restrict, map: "products_brand_id_foreign")
  related_products_related_products_product_idToproducts                  related_products[]     @relation("related_products_product_idToproducts")
  related_products_related_products_related_product_idToproducts          related_products[]     @relation("related_products_related_product_idToproducts")
  reviews                                                                 reviews[]
  up_sell_products_up_sell_products_product_idToproducts                  up_sell_products[]     @relation("up_sell_products_product_idToproducts")
  up_sell_products_up_sell_products_up_sell_product_idToproducts          up_sell_products[]     @relation("up_sell_products_up_sell_product_idToproducts")
  wish_lists                                                              wish_lists[]

  @@index([brand_id], map: "products_brand_id_foreign")
}

model related_products {
  product_id                                             Int       @db.UnsignedInt
  related_product_id                                     Int       @db.UnsignedInt
  created_at                                             DateTime? @db.Timestamp(0)
  updated_at                                             DateTime? @db.Timestamp(0)
  products_related_products_product_idToproducts         products  @relation("related_products_product_idToproducts", fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "related_products_product_id_foreign")
  products_related_products_related_product_idToproducts products  @relation("related_products_related_product_idToproducts", fields: [related_product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "related_products_related_product_id_foreign")

  @@id([product_id, related_product_id])
  @@index([related_product_id], map: "related_products_related_product_id_foreign")
}

model reminders {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id      Int       @db.UnsignedInt
  code         String
  completed    Boolean   @default(false)
  completed_at DateTime? @db.DateTime(0)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  users        users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "reminders_user_id_foreign")

  @@index([user_id], map: "reminders_user_id_foreign")
}

model reviews {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  reviewer_id   Int?      @db.UnsignedInt
  product_id    Int       @db.UnsignedInt
  rating        Int
  reviewer_name String
  comment       String    @db.Text
  is_approved   Boolean
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  products      products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "reviews_product_id_foreign")

  @@index([product_id], map: "reviews_product_id_index")
  @@index([reviewer_id], map: "reviews_reviewer_id_index")
}

model role_translations {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  role_id Int    @db.UnsignedInt
  locale  String
  name    String
  roles   roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "role_translations_role_id_foreign")

  @@unique([role_id, locale], map: "role_translations_role_id_locale_unique")
}

model roles {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  permissions       String?             @db.Text
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  role_translations role_translations[]
  user_roles        user_roles[]
}

model search_terms {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  term       String    @unique(map: "search_terms_term_unique")
  results    Int       @db.UnsignedInt
  hits       Int       @default(0) @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model setting_translations {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  setting_id Int      @db.UnsignedInt
  locale     String
  value      String?  @db.LongText
  settings   settings @relation(fields: [setting_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "setting_translations_setting_id_foreign")

  @@unique([setting_id, locale], map: "setting_translations_setting_id_locale_unique")
}

model settings {
  id                   Int                    @id @default(autoincrement()) @db.UnsignedInt
  key                  String                 @unique(map: "settings_key_unique")
  is_translatable      Boolean                @default(false)
  plain_value          String?                @db.Text
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  setting_translations setting_translations[]
}

model slider_slide_translations {
  id                  Int           @id @default(autoincrement()) @db.UnsignedInt
  slider_slide_id     Int           @db.UnsignedInt
  locale              String
  file_id             Int?          @db.UnsignedInt
  caption_1           String?
  caption_2           String?
  call_to_action_text String?
  direction           String?
  slider_slides       slider_slides @relation(fields: [slider_slide_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "slider_slide_translations_slider_slide_id_foreign")

  @@unique([slider_slide_id, locale], map: "slider_slide_translations_slider_slide_id_locale_unique")
}

model slider_slides {
  id                        Int                         @id @default(autoincrement()) @db.UnsignedInt
  slider_id                 Int                         @db.UnsignedInt
  options                   String?                     @db.Text
  call_to_action_url        String?
  open_in_new_window        Boolean?
  position                  Int?
  created_at                DateTime?                   @db.Timestamp(0)
  updated_at                DateTime?                   @db.Timestamp(0)
  slider_slide_translations slider_slide_translations[]
  sliders                   sliders                     @relation(fields: [slider_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "slider_slides_slider_id_foreign")

  @@index([slider_id], map: "slider_slides_slider_id_foreign")
}

model slider_translations {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  slider_id Int     @db.UnsignedInt
  locale    String
  name      String
  sliders   sliders @relation(fields: [slider_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "slider_translations_slider_id_foreign")

  @@unique([slider_id, locale], map: "slider_translations_slider_id_locale_unique")
}

model sliders {
  id                  Int                   @id @default(autoincrement()) @db.UnsignedInt
  speed               Int?
  autoplay            Boolean?
  autoplay_speed      Int?
  fade                Boolean               @default(false)
  dots                Boolean?
  arrows              Boolean?
  created_at          DateTime?             @db.Timestamp(0)
  updated_at          DateTime?             @db.Timestamp(0)
  slider_slides       slider_slides[]
  slider_translations slider_translations[]
}

model state_translations {
  id       BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  state_id BigInt? @db.UnsignedBigInt
  locale   String
  name     String
  states   states? @relation(fields: [state_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "state_translations_state_id_foreign")

  @@index([state_id], map: "state_translations_state_id_foreign")
}

model states {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  country_id         BigInt
  code               String
  sort_order         Int
  is_active          Int
  created_at         DateTime?            @db.Timestamp(0)
  updated_at         DateTime?            @db.Timestamp(0)
  state_translations state_translations[]
}

model tag_translations {
  id     Int    @id @default(autoincrement()) @db.UnsignedInt
  tag_id Int    @db.UnsignedInt
  locale String
  name   String
  tags   tags   @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tag_translations_tag_id_foreign")

  @@unique([tag_id, locale], map: "tag_translations_tag_id_locale_unique")
}

model tags {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  slug             String             @unique(map: "tags_slug_unique")
  created_at       DateTime?          @db.Timestamp(0)
  updated_at       DateTime?          @db.Timestamp(0)
  product_tags     product_tags[]
  tag_translations tag_translations[]
}

model tax_class_translations {
  id           Int         @id @default(autoincrement()) @db.UnsignedInt
  tax_class_id Int         @db.UnsignedInt
  locale       String
  label        String
  tax_classes  tax_classes @relation(fields: [tax_class_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tax_class_translations_tax_class_id_foreign")

  @@unique([tax_class_id, locale], map: "tax_class_translations_tax_class_id_locale_unique")
}

model tax_classes {
  id                     Int                      @id @default(autoincrement()) @db.UnsignedInt
  based_on               String
  deleted_at             DateTime?                @db.Timestamp(0)
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  tax_class_translations tax_class_translations[]
  tax_rates              tax_rates[]
}

model tax_rate_translations {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  tax_rate_id Int       @db.UnsignedInt
  locale      String
  name        String
  tax_rates   tax_rates @relation(fields: [tax_rate_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tax_rate_translations_tax_rate_id_foreign")

  @@unique([tax_rate_id, locale], map: "tax_rate_translations_tax_rate_id_locale_unique")
}

model tax_rates {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  tax_class_id          Int                     @db.UnsignedInt
  country               String
  state                 String
  city                  String
  zip                   String
  rate                  Decimal                 @db.Decimal(8, 4)
  position              Int                     @db.UnsignedInt
  deleted_at            DateTime?               @db.Timestamp(0)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  order_taxes           order_taxes[]
  tax_rate_translations tax_rate_translations[]
  tax_classes           tax_classes             @relation(fields: [tax_class_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tax_rates_tax_class_id_foreign")

  @@index([tax_class_id], map: "tax_rates_tax_class_id_index")
}

model throttle {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int?      @db.UnsignedInt
  type       String
  ip         String?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "throttle_user_id_foreign")

  @@index([user_id], map: "throttle_user_id_foreign")
}

model transactions {
  id             Int       @id @default(autoincrement()) @db.UnsignedInt
  order_id       Int       @unique(map: "transactions_order_id_unique") @db.UnsignedInt
  transaction_id String
  payment_method String
  deleted_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  orders         orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "transactions_order_id_foreign")
}

model translation_translations {
  id             Int          @id @default(autoincrement()) @db.UnsignedInt
  translation_id Int          @db.UnsignedInt
  locale         String
  value          String       @db.Text
  translations   translations @relation(fields: [translation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "translation_translations_translation_id_foreign")

  @@unique([translation_id, locale], map: "translation_translations_translation_id_locale_unique")
}

model translations {
  id                       Int                        @id @default(autoincrement()) @db.UnsignedInt
  key                      String
  created_at               DateTime?                  @db.Timestamp(0)
  updated_at               DateTime?                  @db.Timestamp(0)
  translation_translations translation_translations[]

  @@index([key], map: "translations_key_index")
}

model up_sell_products {
  product_id                                             Int       @db.UnsignedInt
  up_sell_product_id                                     Int       @db.UnsignedInt
  created_at                                             DateTime? @db.Timestamp(0)
  updated_at                                             DateTime? @db.Timestamp(0)
  products_up_sell_products_product_idToproducts         products  @relation("up_sell_products_product_idToproducts", fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "up_sell_products_product_id_foreign")
  products_up_sell_products_up_sell_product_idToproducts products  @relation("up_sell_products_up_sell_product_idToproducts", fields: [up_sell_product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "up_sell_products_up_sell_product_id_foreign")

  @@id([product_id, up_sell_product_id])
  @@index([up_sell_product_id], map: "up_sell_products_up_sell_product_id_foreign")
}

model updater_scripts {
  id     Int    @id @default(autoincrement()) @db.UnsignedInt
  script String
}

model user_datas {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id         Int?      @db.UnsignedInt
  dob             DateTime  @db.Date
  whatsapp_mobile String
  address         String
  city            String
  category        Int
  education       Int?
  religion        Int
  cast            String
  gender          String
  country         String
  state           String
  photo           String
  join_date       DateTime  @db.Date
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  users           users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_datas_user_id_foreign")

  @@index([user_id], map: "user_datas_user_id_foreign")
}

model user_positions {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  user_id      Int?        @db.UnsignedInt
  committee_id BigInt?     @db.UnsignedBigInt
  position_id  BigInt?     @db.UnsignedBigInt
  created_at   DateTime?   @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)
  committees   committees? @relation(fields: [committee_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_positions_committee_id_foreign")
  positions    positions?  @relation(fields: [position_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_positions_position_id_foreign")
  users        users?      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_positions_user_id_foreign")

  @@index([committee_id], map: "user_positions_committee_id_foreign")
  @@index([position_id], map: "user_positions_position_id_foreign")
  @@index([user_id], map: "user_positions_user_id_foreign")
}

model user_roles {
  user_id    Int       @db.UnsignedInt
  role_id    Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  roles      roles     @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_roles_role_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_roles_user_id_foreign")

  @@id([user_id, role_id])
  @@index([role_id], map: "user_roles_role_id_foreign")
}

model users {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  first_name        String
  last_name         String
  email             String              @unique(map: "users_email_unique")
  phone             String
  password          String
  permissions       String?             @db.Text
  last_login        DateTime?           @db.DateTime(0)
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  activations       activations[]
  addresses         addresses[]
  blog_posts        blog_posts[]
  default_addresses default_addresses[]
  persistences      persistences[]
  reminders         reminders[]
  throttle          throttle[]
  user_datas        user_datas[]
  user_positions    user_positions[]
  user_roles        user_roles[]
  wish_lists        wish_lists[]
}

model variation_translations {
  id           Int        @id @default(autoincrement()) @db.UnsignedInt
  variation_id Int        @db.UnsignedInt
  locale       String
  name         String
  variations   variations @relation(fields: [variation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "variation_translations_variation_id_foreign")

  @@unique([variation_id, locale], map: "variation_translations_variation_id_locale_unique")
}

model variation_value_translations {
  id                 Int              @id @default(autoincrement()) @db.UnsignedInt
  variation_value_id Int              @db.UnsignedInt
  locale             String
  label              String
  variation_values   variation_values @relation(fields: [variation_value_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "variation_value_translations_variation_value_id_foreign")

  @@unique([variation_value_id, locale], map: "variation_value_translations_variation_value_id_locale_unique")
}

model variation_values {
  id                             Int                              @id @default(autoincrement()) @db.UnsignedInt
  uid                            String                           @unique(map: "variation_values_uid_unique")
  variation_id                   Int                              @db.UnsignedInt
  value                          String?
  position                       Int?                             @db.UnsignedInt
  created_at                     DateTime?                        @db.Timestamp(0)
  updated_at                     DateTime?                        @db.Timestamp(0)
  order_product_variation_values order_product_variation_values[]
  variation_value_translations   variation_value_translations[]
  variations                     variations                       @relation(fields: [variation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "variation_values_variation_id_foreign")

  @@index([variation_id], map: "variation_values_variation_id_index")
}

model variations {
  id                       Int                        @id @default(autoincrement()) @db.UnsignedInt
  uid                      String                     @unique(map: "variations_uid_unique")
  type                     String
  is_global                Boolean                    @default(true)
  position                 Int?                       @db.UnsignedInt
  deleted_at               DateTime?                  @db.Timestamp(0)
  created_at               DateTime?                  @db.Timestamp(0)
  updated_at               DateTime?                  @db.Timestamp(0)
  order_product_variations order_product_variations[]
  product_variations       product_variations[]
  variation_translations   variation_translations[]
  variation_values         variation_values[]
}

model wish_lists {
  user_id    Int       @db.UnsignedInt
  product_id Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  products   products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "wish_lists_product_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "wish_lists_user_id_foreign")

  @@id([user_id, product_id])
  @@index([product_id], map: "wish_lists_product_id_foreign")
}
